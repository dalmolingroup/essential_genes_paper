View(SH.limma)
design <- model.matrix(~0 + rin + as.factor(phenotype), data = pheno_female)
design <- model.matrix(~rin + as.factor(phenotype), data = pheno_female)
colnames(design) <- c("rin", "CTRL", "MDD")
fit <- lmFit(log_cpm[, -23], design)
contrasts <- makeContrasts(MDD-CTRL, levels=design)
View(contrasts)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.001)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
colnames(desc())
colnames(design)
design <- model.matrix(~rin + as.factor(phenotype), data = pheno_female)
fit <- lmFit(log_cpm[, -23], design)
contrasts <- makeContrasts(, levels=design)
colnames(design)
##
fit <- eBayes(lmFit(data, model.matrix(~rin+phenotype, data = pheno_female)))
##
fit <- eBayes(lmFit(log_cpm[, -23], model.matrix(~rin+phenotype, data = pheno_female)))
y <- topTable(fit, coef=3, number=Inf)
View(y)
DEgenes <- y[y$adj.P.Val<0.05,]
y <- topTable(fit, coef=1, number=Inf)
View(y)
fit$coefficients
cof <- fit$coefficients
View(cof)
y <- topTable(fit, coef=2, number=Inf)
View(y)
design <- model.matrix(~ 0 + phenotype + rin + age, data = pheno_female)
fit <- lmFit(log_cpm[, -23], design)
View(design)
colnames(design) <- c("ctrl", "mdd", "rin", "age")
fit <- lmFit(log_cpm[, -23], design)
View(fit)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=design)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.001)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", levels=design)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.001)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=design)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.001)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
sum(SH.limma$degenes.c_1)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.05)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
sum(SH.limma$degenes.c_1)
View(design)
limmaUsersGuide()
c_voom <- voom(dge, design = design, normalize.method = )
View(c_voom)
c_voom <- voom(dge, design = design, plot = T)
design <- model.matrix(~ 0 + phenotype + rin + age, data = pheno_female)
colnames(design) <- c("ctrl", "mdd", "rin", "age")
fit <- lmFit(c_voom, design)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=design)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.05)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=mod0Sv)
modSv = cbind(mod1,a$sv)
mod0Sv = cbind(mod0,a$sv)
##
mod1 <- model.matrix(~0 + phenotype + rin, data = pheno[female_samples,])
colnames(mod1) <- c("CTRL", "MDD")
mod0 <- cbind(mod1[,1])
mod0 <- cbind(mod1[,1])
modSv = cbind(mod1,a$sv)
mod0Sv = cbind(mod0,a$sv)
#
a <- svaseq(as.matrix(female_counts), mod1, mod0)
modSv = cbind(mod1,a$sv)
mod0Sv = cbind(mod0,a$sv)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=modSv)
View(mod0Sv)
design <- model.matrix(~ 0 + phenotype + rin + age, data = pheno_female)
design <- cbind(design, a$sv)
View(design)
design <- model.matrix(~ 0 + phenotype, data = pheno_female)
design <- cbind(design, a$sv)
colnames(design)[c(1,2)] <- c("ctrl", "mdd")
fit <- lmFit(c_voom, design)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=modSv)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=design)
View(design)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=design)
colnames(design)[c(1,2)] <- c("ctrl", "mdd", "v1", "v2", "v3", "v4"
colnames(design)[c(1,2)] <- c("ctrl", "mdd", "v1", "v2", "v3", "v4")
c_voom <- voom(dge, design = design, plot = T)
design <- model.matrix(~ 0 + phenotype, data = pheno_female)
design <- cbind(design, a$sv)
colnames(design) <- c("ctrl", "mdd", "v1", "v2", "v3", "v4")
View(design)
fit <- lmFit(c_voom, design)
contrasts <- makeContrasts(c_1 = "ctrl-mdd", c_2 = "mdd-ctrl", levels=design)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.05)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
library(data.table)
library(limma)
library(edgeR)
library(DESeq2)
library(sva)
counts <- as.data.frame(fread("~/Área de Trabalho/allCounts.txt"))
pheno <- as.data.frame(fread("~/Área de Trabalho/MDD/samples_homo_sapiens.txt"))
pheno <- pheno[grep("Dorsolateral prefrontal cortex", pheno$tissue),]
pheno <- pheno[!duplicated(pheno$run_accession),]
pheno$phenotype <- as.factor(pheno$phenotype)
male_samples <- which(pheno$gender == "male")
female_samples <- which(pheno$gender == "female")
rownames(counts) <- counts$Geneid
counts <- counts[, c(-1:-6)]
pheno_female <- pheno[female_samples,]
female_counts <- as.matrix(counts[, female_samples])
idx <- apply(female_counts, 1, function(x) length(x[x>5]) >= 2)
female_counts <- female_counts[idx, ]
#Criando o Objeto DGEList
dge <- DGEList(counts= female_counts)
#Excluindo linhas com múltiplos 0 ou contagens baixas
keep <- filterByExpr(dge, mod1) #keep <- rowSums(cpm(dge)>1) >= 2
dge <- dge[keep,,keep.lib.sizes=FALSE]
#Normalizar por TTM
dge <- calcNormFactors(dge)
#Calcular o logCPM
log_cpm <- cpm(dge, log = T,prior.count = 3)
log_cpm <- as.data.frame(log_cpm)
###
#Criando o Objeto DGEList
dge <- DGEList(counts= female_counts)
design <- model.matrix(~ 0 + phenotype, data = pheno_female)
View(design)
design <- model.matrix(~ 0 + phenotype + rin, data = pheno_female)
View(design)
colnames(design) <- c("CTRL", "MDD", "rin")
#Excluindo linhas com múltiplos 0 ou contagens baixas
keep <- filterByExpr(dge, design) #keep <- rowSums(cpm(dge)>1) >= 2
dge <- dge[keep,,keep.lib.sizes=FALSE]
#Normalizar por TTM
dge <- calcNormFactors(dge)
#Calcular o logCPM
log_cpm <- cpm(dge, log = T,prior.count = 3)
log_cpm <- as.data.frame(log_cpm)
t_log <- t(log_cpm)
pca <- prcomp(t_log)
screeplot(pca, type = "line")
fit <- lmFit(log_cpm, modSv)
c_voom <- voom(dge, design = design, plot = T)
fit <- lmFit(c_voom, design)
c_voom <- voom(dge, design = design, plot = T)
fit <- lmFit(c_voom, design)
contrasts <- makeContrasts(c_1 = "CTRL-MDD", c_2 = "MDD-CTRL", levels=design)
View(contrasts)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.05)
SH.limma <- data.frame( logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
SH.limma <- data.frame(logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
features <- rowSums(res.fit!=0) > 0
features <- names(features)[features]
#
a <- svaseq(as.matrix(female_counts), mod1, mod0)
c_voom
View(design)
#####
mod0 <- cbind(design[, c(1,2)])
View(mod0)
sva <- svaseq(c_voom$E, design, mod0)
sva <- svaseq(female_counts, design, mod0)
design <- cbind(design, sva$sv)
View(design)
colnames(design) <- c("ctrl", "mdd", "rin", "v1", "v2", "v3", "v4")
View(design)
fit <- lmFit(log_cpm, design)
contrasts <- makeContrasts(c_1 = "mdd-ctrl", levels=design)
View(contrasts)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.05)
SH.limma <- data.frame(logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
View(SH.limma)
sum(SH.limma$c_1.2)
browseVignettes()
library(tidyr)
library(dplyr)
log_cpm$gene_id <- rownames(log_cpm)
teste <- gather(log_cpm, samples, exp, -gene_id)
teste$samples <- gsub("\\.bam", "", teste$samples)
teste <- inner_join(pheno_female[, c("run_accession", "age", "pmi", "drug_type", "phenotype", "rin", "alcool")],
teste, by = c("run_accession" = "samples"))
anova(lm(exp ~ phenotype + rin + age + pmi, data = teste))
View(SH.limma)
View(SH.limma)
View(contrasts)
topTable(fit)
topTable(ct.fit)
View(ct.fit)
our_data <- Biobase::ExpressionSet(log_cpm, phenoData = pheno_female)
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = pheno_female)
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(pheno_female)
rownames(pheno_female) <- pheno_female$run_accession
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(log_cpm)
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
rownames(pheno_female) <- pheno_female$run_accession
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(log_cpm)
View(pheno_female)
type_mean <- tapply(log_cpm[1,], pheno_female$phenotype, mean)
type_mean <- tapply(log_cpm[1,], as.character(pheno_female$phenotype), mean)
log_cpm[1,]
as.character(pheno_female$phenotype)
length(log_cpm[1,])
View(log_cpm)
log_cpm$gene_id <- NULL
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
type_mean <- tapply(our_data[1,], pheno_female$phenotype, mean)
rownames(pheno_female) <- pheno_female$run_accession
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
log_cpm$gene_id <- NULL
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(our_data)
pheno_female$phenotype
our_data[1,]
type_mean <- tapply(log_cpm[1,], pheno_female$phenotype, mean)
View(log_cpm)
type_mean <- tapply(as.numeric(log_cpm[1,]), pheno_female$phenotype, mean)
pheno_female$phenotype
type_mean
type_mean["MDD"] - type_mean["CTRL"]
topTable(ct.fit)
type_mean <- tapply(as.numeric(log_cpm[rownames(log_cpm) == "ENSG00000101336",]), pheno_female$phenotype, mean)
type_mean["MDD"] - type_mean["CTRL"]
topTable(ct.fit)
type_mean["CTRL"] - type_mean["MDD"]
rownames(pheno_female) <- pheno_female$run_accession
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
log_cpm$gene_id <- NULL
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(our_data)
our_data@phenoData@data
type_mean <- tapply(our_data["ENSG00000101336",], pheno_female$phenotype, mean)
our_data["ENSG00000101336",]
exprs(our_data)["ENSG00000101336",]
type_mean <- tapply(exprs(our_data)["ENSG00000101336",], pheno_female$phenotype, mean)
type_mean["MDD"] - type_mean["CTRL"]
type_mean["CTRL"] - type_mean["MDD"]
topTable(ct.fit)
fit <- lmFit(log_cpm, design)
contrasts <- makeContrasts(c_1 = "mdd-ctrl", levels=design)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.05)
SH.limma <- data.frame(logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
type_mean <- tapply(as.numeric(log_cpm[rownames(log_cpm) == "ENSG00000101336",]), pheno_female$phenotype, mean)
type_mean <- tapply(exprs(our_data)["ENSG00000101336",], pheno_female$phenotype, mean)
type_mean["MDD"] - type_mean["CTRL"]
type_mean["CTRL"] - type_mean["MDD"]
View(contrasts)
sum(idx)
day[idx]
# Por fim, o vetor seguinte denota o numero de dias os quais os dados sobre a velocidade do vento foram
# coletados
day <- 1:153
# Quantos dias em maio (may) tiveram valores de velocidade do vento maiores que 15 mph? Quais foram estes dias?
idx <- wind > 15 & month == "may"
sum(idx)
source('~/Área de Trabalho/Disc_bio_sist/tarefa_2/exercicio_2_respondido.R')
a <- c(-2, 1, 2, 3, 4, 5, 6)
boxplot(a)
library(ggplot2)
a <- data.frame(a)
View(a)
ggplot(a, aes(x = a)) +
geom_violin()
ggplot(a, aes(x = 1, y = a)) +
geom_violin()
a <- data.frame(sample(-1000:1000, 500))
ggplot(a, aes(x = 1, y = a)) +
geom_violin()
library(MicroarrayMethods)
dt <- list_datasets()
View(dt)
list_platforms()
list_platforms(dataset = "celegans_gene_ensembl")
a <- list_platforms(dataset = "celegans_gene_ensembl")
### IDENTIFICATION OF LETHAL GENES IN DROSOPHILA
setwd("~/part_1/analysis/drosophila/")
library(readr)
path <- "../../organisms/allele_phenotypic_data_fb_2019_01.tsv"
table_drosp <- read_delim(file = path, delim = "\t", col_names = T)
problems
problems()
View(table_drosp)
path <- "../../organisms/allele_phenotypic_data_fb_2019_01.tsv"
table_drosp <- read_delim(file = path, delim = "\t", col_names = T)
path <- "../../organisms/allele_phenotypic_data_fb_2019_01.tsv"
table_drosp <- read_delim(file = path, delim = "\t", col_names = T)
# import table with gene ids
table_genes <- read_tsv("fbal_to_fbgn_fb_2019_01.tsv")
# search for lethal genes
library(stringr)
idx <- str_detect(table_drosp$phenotype, "lethal")
table_lethal_drosp1 <- table_drosp[idx, ]
idx <- str_detect(table_lethal_drosp1$phenotype, "partially")
table_lethal_drosp2 <- table_lethal_drosp1[!idx, ]
table_lethal_drosp2$allele_symbol <- str_replace(table_lethal_drosp2$allele_symbol, pattern = "\\[.*\\]", replacement = "")
View(table_lethal_drosp2)
# map the allele ids into gene ids used by FlyBase
library(dplyr)
table_lethal_mapped <- inner_join(table_lethal_drosp2, table_genes, by = c("allele_Fbal" = "AlleleID"))
View(table_lethal_drosp2)
View(table_genes)
table_lethal_mapped <- inner_join(table_lethal_drosp2, table_genes, by = c("allele_Fbal" = "AlleleID"))
colnames(table_genes)
colnames(table_lethal_drosp2)
table_lethal_mapped <- inner_join(table_lethal_drosp2, table_genes, by = c("allele_FBal" = "AlleleID"))
View(table_lethal_mapped)
n_distinct(table_lethal_mapped$GeneID)
# map genes with biomaRt
library(biomaRt)
ensembl <- useMart("ensembl")
ensembl <- useDataset("dmelanogaster_gene_ensembl", ensembl)
lethal_genes_map <- getBM(attributes = c("ensembl_peptide_id", "flybase_gene_id"),
filters = "flybase_gene_id",
values = lethal_genes_drosp,
mart = ensembl)
# some ids have non-characters symbols and must be removed
nonlethal_genes_drosp <- nonlethal_genes_drosp[grep("^[A-Za-z0-9]+$", nonlethal_genes_drosp, perl = TRUE)]
# get a list of all lethal genes
lethal_genes_drosp <- unique(table_lethal_mapped$GeneID)
# get a list of non-lethal genes
table_nonlethal_mapped <- anti_join(table_genes, table_lethal_mapped, by = "GeneID")
nonlethal_genes_drosp <- unique(table_nonlethal_mapped$GeneID)
# confirm if all the genes were mapped
n_distinct(nonlethal_genes_drosp) + n_distinct(lethal_genes_drosp) == n_distinct(table_genes$GeneID)
# some ids have non-characters symbols and must be removed
nonlethal_genes_drosp <- nonlethal_genes_drosp[grep("^[A-Za-z0-9]+$", nonlethal_genes_drosp, perl = TRUE)]
non_lethal_map <- getBM(attributes = c("ensembl_peptide_id", "flybase_gene_id"),
filters = "flybase_gene_id",
values = nonlethal_genes_drosp,
mart = ensembl)
View(non_lethal_map)
# map cogs
load("../../geneplast_objects/geneplastData.RData")
cog_dros <- unique(cogdata[cogdata$ssp_id == 7227, c("protein_id", "cog_id")])
colnames(cog_dros)[1] <- "ensembl_peptide_id"
library(dplyr)
lethal_cogs <- semi_join(cog_drosp, lethal_genes_map, by = "ensembl_peptide_id")
nonlethal_cogs <- semi_join(cog_drosp, non_lethal_map, by = "ensembl_peptide_id")
cog_dros <- unique(cogdata[cogdata$ssp_id == 7227, c("protein_id", "cog_id")])
View(cog_dros)
colnames(cog_dros)[1] <- "ensembl_peptide_id"
View(cog_dros)
lethal_cogs <- semi_join(cog_drosp, lethal_genes_map, by = "ensembl_peptide_id")
lethal_cogs <- semi_join(cog_dros, lethal_genes_map, by = "ensembl_peptide_id")
library(biomaRt)
ensembl <- useMart("ensembl")
ensembl <- useDataset("dmelanogaster_gene_ensembl", ensembl)
lethal_genes_map <- getBM(attributes = c("ensembl_peptide_id", "flybase_gene_id"),
filters = "flybase_gene_id",
values = lethal_genes_drosp,
mart = ensembl)
nonlethal_genes_drosp <- nonlethal_genes_drosp[grep("^[A-Za-z0-9]+$", nonlethal_genes_drosp, perl = TRUE)]
non_lethal_map <- getBM(attributes = c("ensembl_peptide_id", "flybase_gene_id"),
filters = "flybase_gene_id",
values = nonlethal_genes_drosp,
mart = ensembl)
library(dplyr)
lethal_cogs <- semi_join(cog_dros, lethal_genes_map, by = "ensembl_peptide_id")
nonlethal_cogs <- semi_join(cog_drosp, non_lethal_map, by = "ensembl_peptide_id")
nonlethal_cogs <- semi_join(cog_dros, non_lethal_map, by = "ensembl_peptide_id")
# save files
save(lethal_genes_map, non_lethal_map, lethal_cogs, nonlethal_cogs,
file = "ables_cogs_genes_drosp.RData")
# prepare data for geneplast functions
# cog ids
lethal_cog_ids <- data.frame(cog_id = unique(lethal_cogs$cog_id))
rownames(lethal_cog_ids) <- lethal_cog_ids$cog_id
nonlethal_cogs_ids <- data.frame(cog_id = unique(nonlethal_cogs$cog_id))
rownames(nonlethal_cogs_ids) <- nonlethal_cogs_ids$cog_id
#### GENEPLAST ANALYSIS FOR ROOT INFERING OF LETHAL GENES
library(geneplast)
# create object ogp
ogp_drosp_lethal <- gplast.preprocess(cogdata = cogdata,
sspids = ssp,
cogids = lethal_cog_ids, verbose = FALSE)
# create ogr object
ogr_drosp_lethal <- groot.preprocess(cogdata = cogdata, phyloTree = phyloTree,
spid = '7227', cogids = lethal_cog_ids, verbose=FALSE)
# grootTest
set.seed(1)
library(snow)
options(cluster=makeCluster(3, "SOCK"))
ogr_drosp_lethal <- groot(ogr_drosp_lethal, nPermutations = 10000, verbose = FALSE)
stopCluster(getOption("cluster"))
# grootRes
res_root_drosp_lethal <- groot.get(ogr_drosp_lethal, what = "results")
# MERGE TABLES OF ROOT INFERENCE AND GENES
res_root_drosp_lethal$cog_id <- rownames(res_root_drosp_lethal)
res_plast_drosp_lethal$cog_id <- rownames(res_plast_drosp_lethal)
table_merged_lethal_cog_root <- inner_join(lethal_cogs, res_root_drosp_lethal, by = "cog_id")
table_merged_lethal_cog_root <- inner_join(table_merged_lethal_cog_root,
res_plast_drosp_lethal,
by = "cog_id")
# create object ogp
ogp_drosp_nonlethal <- gplast.preprocess(cogdata = cog_mapings,
sspids = ssp_ids,
cogids = nonlethal_cogs_ids, verbose = FALSE)
# gplastTest
ogp_drosp_nonlethal <- gplast(ogp_drosp_nonlethal, verbose = FALSE)
# gplastRes
res_plast_drosp_lethal <- gplast.get(ogp_drosp_lethal, what = "results")
# gplastTest
ogp_drosp_lethal <- gplast(ogp_drosp_lethal, verbose = FALSE)
# gplastRes
res_plast_drosp_lethal <- gplast.get(ogp_drosp_lethal, what = "results")
# grootRes
res_root_drosp_lethal <- groot.get(ogr_drosp_lethal, what = "results")
# MERGE TABLES OF ROOT INFERENCE AND GENES
res_root_drosp_lethal$cog_id <- rownames(res_root_drosp_lethal)
res_plast_drosp_lethal$cog_id <- rownames(res_plast_drosp_lethal)
table_merged_lethal_cog_root <- inner_join(lethal_cogs, res_root_drosp_lethal, by = "cog_id")
table_merged_lethal_cog_root <- inner_join(table_merged_lethal_cog_root,
res_plast_drosp_lethal,
by = "cog_id")
# create object ogp
ogp_drosp_nonlethal <- gplast.preprocess(cogdata = cog_mapings,
sspids = ssp_ids,
cogids = nonlethal_cogs_ids, verbose = FALSE)
# create object ogp
ogp_drosp_nonlethal <- gplast.preprocess(cogdata = cogdata,
sspids = ssp,
cogids = nonlethal_cogs_ids, verbose = FALSE)
# gplastTest
ogp_drosp_nonlethal <- gplast(ogp_drosp_nonlethal, verbose = FALSE)
# gplastRes
res_plast_drosp_nonlethal <- gplast.get(ogp_drosp_nonlethal, what = "results")
# create ogr object
load("~/Dropbox/Iara/Tabelas - organismos/mouse/phylotree.RData")
# gplastTest
ogp_drosp_nonlethal <- gplast(ogp_drosp_nonlethal, verbose = FALSE)
# gplastRes
res_plast_drosp_nonlethal <- gplast.get(ogp_drosp_nonlethal, what = "results")
# create ogr object
ogr_drosp_nonlethal <- groot.preprocess(cogdata = cogdata, phyloTree = phyloTree,
spid = '7227', cogids = nonlethal_cogs_ids, verbose=FALSE)
set.seed(1)
options(cluster=makeCluster(3, "SOCK"))
ogr_drosp_nonlethal <- groot(ogr_drosp_nonlethal, nPermutations = 10000, verbose = FALSE)
stopCluster(getOption("cluster"))
# grootRes
res_root_drosp_nonlethal <- groot.get(ogr_drosp_nonlethal, what="results")
# save results
save(ogp_drosp_lethal, ogp_drosp_nonlethal, ogr_drosp_lethal, ogr_drosp_nonlethal,
file = "geneplast_results_drosp.RData")
# MERGE TABLES OF ROOT INFERENCE AND GENES
res_root_drosp_nonlethal$cog_id <- rownames(res_root_drosp_nonlethal)
res_plast_drosp_nonlethal$cog_id <- rownames(res_plast_drosp_nonlethal)
table_merged_nonlethal_cog_root <- inner_join(nonlethal_cogs, res_root_drosp_nonlethal,
by = "cog_id")
table_merged_nonlethal_cog_root <- inner_join(table_merged_nonlethal_cog_root,
res_plast_drosp_nonlethal,
by = "cog_id")
# save results
save(table_merged_lethal_cog_root, table_merged_nonlethal_cog_root,
file = "table_root_drosp.RData")
# Add a new column with lethal and non-lethal
table_merged_lethal_cog_root$lethal_nonlethal <- "lethal"
table_merged_nonlethal_cog_root$lethal_nonlethal <- "nonlethal"
# table plot
table_plot_drosp <- bind_rows(table_merged_lethal_cog_root, table_merged_nonlethal_cog_root)
table_plot_drosp$organism <- "drosophila"
save(table_plot_drosp, file = "table_plot_drosp.RData")
# plot root inference
library(ggplot2)
library(ggsignif)
drosp_plot <- ggplot(table_plot_drosp, aes(x = factor(lethal_nonlethal), y = Root)) +
geom_boxplot(varwidth = TRUE) +
geom_signif(comparisons = list(c("lethal", "nonlethal")),
map_signif_level = T,
test = "t.test") +
scale_y_continuous(limits = c(0,40), breaks = seq(0,40, 5)) +
labs(x = "Categories") +
ggtitle("Root inference for lethal and non-lethal Drosophila COGs") +
annotate("text", x = 0.6, y = 2, label = "*** p < 0.001 \n ** p < 0.01 \n * p < 0.05",
size = 3)
drosp_plot
save(drosp_plot, file = "drosp_plot.RData")
ggsave(plot = drosp_plot, filename = "drosophila_root.pdf",
width = 7, height = 7)
