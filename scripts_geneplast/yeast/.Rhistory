library(dplyr)
log_cpm$gene_id <- rownames(log_cpm)
teste <- gather(log_cpm, samples, exp, -gene_id)
teste$samples <- gsub("\\.bam", "", teste$samples)
teste <- inner_join(pheno_female[, c("run_accession", "age", "pmi", "drug_type", "phenotype", "rin", "alcool")],
teste, by = c("run_accession" = "samples"))
anova(lm(exp ~ phenotype + rin + age + pmi, data = teste))
View(SH.limma)
View(SH.limma)
View(contrasts)
topTable(fit)
topTable(ct.fit)
View(ct.fit)
our_data <- Biobase::ExpressionSet(log_cpm, phenoData = pheno_female)
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = pheno_female)
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(pheno_female)
rownames(pheno_female) <- pheno_female$run_accession
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(log_cpm)
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
rownames(pheno_female) <- pheno_female$run_accession
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(log_cpm)
View(pheno_female)
type_mean <- tapply(log_cpm[1,], pheno_female$phenotype, mean)
type_mean <- tapply(log_cpm[1,], as.character(pheno_female$phenotype), mean)
log_cpm[1,]
as.character(pheno_female$phenotype)
length(log_cpm[1,])
View(log_cpm)
log_cpm$gene_id <- NULL
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
type_mean <- tapply(our_data[1,], pheno_female$phenotype, mean)
rownames(pheno_female) <- pheno_female$run_accession
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
log_cpm$gene_id <- NULL
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(our_data)
pheno_female$phenotype
our_data[1,]
type_mean <- tapply(log_cpm[1,], pheno_female$phenotype, mean)
View(log_cpm)
type_mean <- tapply(as.numeric(log_cpm[1,]), pheno_female$phenotype, mean)
pheno_female$phenotype
type_mean
type_mean["MDD"] - type_mean["CTRL"]
topTable(ct.fit)
type_mean <- tapply(as.numeric(log_cpm[rownames(log_cpm) == "ENSG00000101336",]), pheno_female$phenotype, mean)
type_mean["MDD"] - type_mean["CTRL"]
topTable(ct.fit)
type_mean["CTRL"] - type_mean["MDD"]
rownames(pheno_female) <- pheno_female$run_accession
colnames(log_cpm) <- gsub("\\.bam", "", colnames(log_cpm))
log_cpm$gene_id <- NULL
our_data <- Biobase::ExpressionSet(as.matrix(log_cpm), phenoData = AnnotatedDataFrame(pheno_female))
View(our_data)
our_data@phenoData@data
type_mean <- tapply(our_data["ENSG00000101336",], pheno_female$phenotype, mean)
our_data["ENSG00000101336",]
exprs(our_data)["ENSG00000101336",]
type_mean <- tapply(exprs(our_data)["ENSG00000101336",], pheno_female$phenotype, mean)
type_mean["MDD"] - type_mean["CTRL"]
type_mean["CTRL"] - type_mean["MDD"]
topTable(ct.fit)
fit <- lmFit(log_cpm, design)
contrasts <- makeContrasts(c_1 = "mdd-ctrl", levels=design)
ct.fit <- eBayes(contrasts.fit(fit, contrasts), trend = T)
res.fit <- decideTests(ct.fit, method="global", adjust.method="BH", p.value = 0.05)
SH.limma <- data.frame(logFC = ct.fit$coef, p.value = ct.fit$p.value,
degenes = unclass(res.fit), stringsAsFactors = FALSE)
type_mean <- tapply(as.numeric(log_cpm[rownames(log_cpm) == "ENSG00000101336",]), pheno_female$phenotype, mean)
type_mean <- tapply(exprs(our_data)["ENSG00000101336",], pheno_female$phenotype, mean)
type_mean["MDD"] - type_mean["CTRL"]
type_mean["CTRL"] - type_mean["MDD"]
View(contrasts)
sum(idx)
day[idx]
# Por fim, o vetor seguinte denota o numero de dias os quais os dados sobre a velocidade do vento foram
# coletados
day <- 1:153
# Quantos dias em maio (may) tiveram valores de velocidade do vento maiores que 15 mph? Quais foram estes dias?
idx <- wind > 15 & month == "may"
sum(idx)
source('~/Área de Trabalho/Disc_bio_sist/tarefa_2/exercicio_2_respondido.R')
a <- c(-2, 1, 2, 3, 4, 5, 6)
boxplot(a)
library(ggplot2)
a <- data.frame(a)
View(a)
ggplot(a, aes(x = a)) +
geom_violin()
ggplot(a, aes(x = 1, y = a)) +
geom_violin()
a <- data.frame(sample(-1000:1000, 500))
ggplot(a, aes(x = 1, y = a)) +
geom_violin()
library(MicroarrayMethods)
dt <- list_datasets()
View(dt)
list_platforms()
list_platforms(dataset = "celegans_gene_ensembl")
a <- list_platforms(dataset = "celegans_gene_ensembl")
notas <- c(0, 1, 1.6, 1.9, 2, 3, 3, 3.5, 4, 4.1, 4.5, 4.5,
4.6, 5, 5.5, 5.5, 6, 6, 6, 6.5, 7, 7, 7, 7, 7, 7.3, 7.3,
7.5, 7.5, 8, 8, 8, 8, 8.5, 8.5, 8.5, 9,
9, 9, 9.5, 9.5, 9.5, 10, 10, 10, 10, 10, 10)
notas <- c(0, 1, 1.6, 1.9, 2, 3, 3, 3.5, 4, 4.1, 4.5, 4.5,
4.6, 5, 5, 5.5, 5.5, 6, 6, 6, 6.5, 7, 7, 7, 7, 7, 7.3, 7.3,
7.5, 7.5, 8, 8, 8, 8, 8.5, 8.5, 8.5, 8.5, 9,
9, 9, 9.5, 9.5, 9.5, 10, 10, 10, 10, 10, 10)
mean(notas)
median(notas)
sd(notas)
boxplot(notas)
notas_df <- data.frame(notas)
View(notas_df)
library(ggplot2)
ggplot(notas_df, aes(x = 1, y = notas)) +
ggplot()
ggplot(notas_df, aes(x = notas)) +
ggplot()
ggplot(notas_df, aes(x = notas)) +
geom_boxplot()
ggplot(notas_df, aes(x = 1, y= notas)) +
geom_boxplot()
summary(notas)
ggplot(notas_df, aes(x = 1, y= notas)) +
geom_boxplot() +
theme_minimal()
ggplot(notas_df, aes(x = 1, y= notas)) +
geom_boxplot(varwidth = F)
ggplot(notas_df, aes(x = 1, y= notas)) +
geom_boxplot(varwidth = T)
dados <- read.csv("~/Área de Trabalho/turma.csv", header = T, quote = "/")
View(dados)
installed.packages()
View(dados)
boxplot(dados$Idade ~ dados$Sexo)
boxplot(dados$Peso ~ dados$Sexo)
t.test(dados$Peso[dados$Sexo == "F"], dados$Peso[dados$Sexo == "m"])
t.test(dados$Peso[dados$Sexo == "F"], dados$Peso[dados$Sexo == "M"])
boxplot(dados$Altura, dados$Sexo)
boxplot(dados$Altura ~ dados$Sexo)
t.test(dados$Altura[dados$Sexo == "F"], dados$Altura[dados$Sexo == "M"])
table(dados[,c(2,3)])
plot(dados$Peso, dados$Altura)
lm(dados$Altura ~ dados$Peso)
abline(lm(dados$Altura ~ dados$Peso))
library(ggplot2)
ggplot(dados, aes(x = Peso, y = Altura)) +
geom_point()
ggplot(dados, aes(x = Peso, y = Altura)) +
geom_point()+
stat_smooth(method = "lm")
ggplot(dados, aes(x = Peso, y = Altura)) +
geom_point()+
stat_smooth(method = "loess")
View(dados)
barplot(table(dados[,c(2,3)]))
barplot(table(dados[,c(2,3)]), beside = T, legend = c("F", "M"))
barplot(table(dados[,c(2,3)]), legend = c("F", "M"))
barplot(table(dados[,c(2,3)]), beside = T, legend = c("F", "M"))
table(dados[,c(2,3)])
barplot(table(dados[,2])
barplot(dados$Altura)
shapiro.test(dados$Altura)
ggplot(dados, aes(x = Peso, y = Altura)) +
geom_point() +
stat_smooth(method = "loess")
dados$imc <- dados$Peso / dados$Altura ** 2
View(dados)
dados$imc <- dados$Peso / (dados$Altura ** 2)
View(dados)
View(dados)
dados$imc <- dados$Peso / (dados$Altura/100) ** 2))
dados$imc <- dados$Peso / (dados$Altura/100) ** 2
View(dados)
dados$imc <- dados$Peso / ((dados$Altura/100) ** 2)
View(dados)
library(dplyr)
if(dados$imc[i] < 18.4) {
for (i in 1:nrow(dados))
if(dados$imc[i] < 18.4) {
for (i in 1:nrow(dados)) {
for (i in 1:nrow(dados)) {
dados$classe_imc[i] <- "abaixo"
if(dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
for (i in 1:nrow(dados)) {
if(dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
for (i in 1:nrow(dados)) {
if(dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
for (i in 1:nrow(dados)) {
if(dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
for (i in 1:nrow(dados)) {
for (i in 1:nrow(dados)) {
for (i in 1:nrow(dados) {
for(i in 1:nrow(dados)) {
1:nrow(dados)
for(i in 1:nrow(dados)) {
for(i in 1:nrow(dados)) {
for(i in 1:nrow(dados))
if(dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
for(i in 1:nrow(dados)) {
if(dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
for(i in 1:nrow(dados)) {
if (dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
i in 1:nrow(dados)
for(i in 1:nrow(dados)) {
if (dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
for (i in 1:nrow(dados)) {
if (dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
for (i in 1:28) {
if (dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
for (i in 1:nrow(dados)) {
if (dados$imc[i] < 18.4) {
dados$classe_imc[i] <- "abaixo"
} else if(dados$imc[i] > 18.5 & dados$imc < 24.5) {
dados$classe_imc[i] <- "normal"
} else if(dados$imc[i] > 25 dados$imc > 29.9) {
dados$classe_imc[i] <- "obesidade"
}
}
sqrt(-1)
### IDENTIFICATION OF LETHAL GENES IN DROSOPHILA
setwd("~/part_1/analysis/drosophila/")
### IDENTIFICATION OF LETHAL GENES IN DROSOPHILA
setwd("~/part_1/analysis/drosophila/")
library(readr)
path <- "../../organisms/allele_phenotypic_data_fb_2019_01.tsv"
table_drosp <- read_delim(file = path, delim = "\t", col_names = T)
# import table with gene ids
table_genes <- read_tsv("fbal_to_fbgn_fb_2019_01.tsv")
# search for lethal genes
library(stringr)
idx <- str_detect(table_drosp$phenotype, "lethal")
table_lethal_drosp1 <- table_drosp[idx, ]
idx <- str_detect(table_lethal_drosp1$phenotype, "partially")
table_lethal_drosp2 <- table_lethal_drosp1[!idx, ]
table_lethal_drosp2$allele_symbol <- str_replace(table_lethal_drosp2$allele_symbol, pattern = "\\[.*\\]", replacement = "")
# map the allele ids into gene ids used by FlyBase
library(dplyr)
table_lethal_mapped <- inner_join(table_lethal_drosp2, table_genes, by = c("allele_FBal" = "AlleleID"))
# get a list of all lethal genes
lethal_genes_drosp <- unique(table_lethal_mapped$GeneID)
# get a list of non-lethal genes
table_nonlethal_mapped <- anti_join(table_genes, table_lethal_mapped, by = "GeneID")
nonlethal_genes_drosp <- unique(table_nonlethal_mapped$GeneID)
# confirm if all the genes were mapped
n_distinct(nonlethal_genes_drosp) + n_distinct(lethal_genes_drosp) == n_distinct(table_genes$GeneID)
setwd("~/part_1/analysis/drosophila/")
library(tidyverse)
library(biomaRt)
path <- "../../organisms/allele_phenotypic_data_fb_2019_01.tsv"
table_drosp <- read_delim(file = path, delim = "\t", col_names = T)
# import table with gene ids
table_genes <- read_tsv("fbal_to_fbgn_fb_2019_01.tsv")
# search for lethal genes
idx <- str_detect(table_drosp$phenotype, "lethal")
table_lethal_drosp1 <- table_drosp[idx, ]
idx <- str_detect(table_lethal_drosp1$phenotype, "partially")
table_lethal_drosp2 <- table_lethal_drosp1[!idx, ]
table_lethal_drosp2$allele_symbol <- str_replace(table_lethal_drosp2$allele_symbol, pattern = "\\[.*\\]", replacement = "")
# map the allele ids into gene ids used by FlyBase
table_lethal_mapped <- inner_join(table_lethal_drosp2, table_genes, by = c("allele_FBal" = "AlleleID"))
# get a list of all lethal genes
lethal_genes_drosp <- unique(table_lethal_mapped$GeneID)
# get a list of non-lethal genes
table_nonlethal_mapped <- anti_join(table_genes, table_lethal_mapped, by = "GeneID")
nonlethal_genes_drosp <- unique(table_nonlethal_mapped$GeneID)
# confirm if all the genes were mapped
n_distinct(nonlethal_genes_drosp) + n_distinct(lethal_genes_drosp) == n_distinct(table_genes$GeneID)
# GENEPLAST ANALYSIS
setwd("~/part_1/analysis/drosophila")
load("../../geneplast_objects/geneplastData.RData")
library(readr)
# YEAST ANALYSIS (S. scerevisae)
setwd("~/part_1/analysis/yeast/")
library(readr)
cols <- c('feature_name','feature_type','gene_name','sgd_id','reference',
'experiment_type','mutant_type','allele','strain_bg','phenotype',
'chemical','conditions','details','reporter')
scerevisae_table <- read.delim(file = "../../organisms/phenotype_data.tab",
col.names = cols)
# find lethal genes
idx <- scerevisae_table$mutant_type == 'null' & scerevisae_table$phenotype == 'inviable'
scerevisae_inviables <- scerevisae_table[idx, ]
# find nonlethal genes
library(dplyr)
scerevisae_nonlethal <- anti_join(scerevisae_table, scerevisae_inviables,
by = "sgd_id")
library(biomaRt)
ensembl <- useMart('ensembl')
ensembl <- useDataset('scerevisiae_gene_ensembl', ensembl)
all_genes <- getBM(attributes = c('ensembl_peptide_id', "external_gene_name"),
mart = ensembl)
all_genes$ensembl_peptide_id <- gsub("_mRNA", "", all_genes$ensembl_peptide_id)
all_genes[all_genes$ensembl_peptide_id == "",] <- NA
all_genes <- na.omit(all_genes)
scerevisae_nonlethal <- anti_join(all_genes, scerevisae_inviables,
by = c("ensembl_peptide_id" = "feature_name"))
# MAP COGS
load("../../geneplast_objects/geneplastData.RData")
yeast_cogs <- unique(cogdata[cogdata$ssp_id == 4932, c("protein_id", "cog_id")])
colnames(yeast_cogs)[1] <- "ensembl_peptide_id"
# save cog tables
save(scerevisae_inviables, scerevisae_nonlethal, yeast_cogs,
file = "cog_yeast_tables.RData")
# GENEPLAST ANALYSIS
# Prepare data for geneplast functions
cog_ids <- data.frame(cog_id = unique(yeast_cogs$cog_id), stringsAsFactors = F)
rownames(cog_ids) <- cog_ids$cog_id
# create object ogp
ogp_drosp <- gplast.preprocess(cogdata = cogdata,
sspids = ssp,
cogids = cog_ids, verbose = FALSE)
#### GENEPLAST ANALYSIS ----
library(geneplast)
# create object ogp
ogp_drosp <- gplast.preprocess(cogdata = cogdata,
sspids = ssp,
cogids = cog_ids, verbose = FALSE)
# gplastTest
ogp_drosp <- gplast(ogp_drosp, verbose = FALSE)
# gplastRes
res_plast_drosp <- gplast.get(ogp_drosp, what = "results")
# create ogr object
ogr_drosp <- groot.preprocess(cogdata = cogdata, phyloTree = phyloTree,
spid = '4932', cogids = cog_ids, verbose=FALSE)
# create object ogp
ogp_yeast <- gplast.preprocess(cogdata = cogdata,
sspids = ssp,
cogids = cog_ids, verbose = FALSE)
# gplastTest
ogp_yeast <- gplast(ogp_yeast, verbose = FALSE)
# create ogr object
ogr_yeast <- groot.preprocess(cogdata = cogdata, phyloTree = phyloTree,
spid = '4932', cogids = cog_ids, verbose=FALSE)
# grootTest
set.seed(1)
library(snow)
options(cluster=makeCluster(3, "SOCK"))
ogr_yeast <- groot(ogr_yeast, nPermutations = 10000, verbose = FALSE)
stopCluster(getOption("cluster"))
# grootResggsignif
res_root_yeast <- groot.get(ogr_yeast, what = "results")
# Phylotree
groot.plot(ogr_yeast, plot.lcas = T)
# MERGE TABLES OF ROOT INFERENCE AND GENES
res_root_yeast$cog_id <- rownames(res_root_yeast)
res_plast_yeast$cog_id <- rownames(res_plast_yeast)
table_cog_root <- inner_join(cog_yeast, res_root_yeast, by = "cog_id")
table_cog_root <- inner_join(table_cog_root, res_plast_yeast,
by = "cog_id")
table_cog_root <- inner_join(cog_yeast, res_root_yeast, by = "cog_id")
table_cog_root <- inner_join(yeast_cogs, res_root_yeast, by = "cog_id")
table_cog_root <- inner_join(table_cog_root, res_plast_yeast,
by = "cog_id")
# gplastRes
res_plast_yeast <- gplast.get(ogp_yeast, what = "results")
table_cog_root <- inner_join(yeast_cogs, res_root_yeast, by = "cog_id")
table_cog_root <- inner_join(table_cog_root, res_plast_yeast,
by = "cog_id")
# MERGE TABLES OF ROOT INFERENCE AND GENES
res_root_yeast$cog_id <- rownames(res_root_yeast)
res_plast_yeast$cog_id <- rownames(res_plast_yeast)
table_cog_root <- inner_join(yeast_cogs, res_root_yeast, by = "cog_id")
table_cog_root <- inner_join(table_cog_root, res_plast_yeast,
by = "cog_id")
table_cog_root_lethal <- table_cog_root %>%
mutate(lethal_nonlethal = case_when(
ensembl_peptide_id %in% scerevisae_inviables$feature_name ~ "lethal"
), organism = "drosophila") %>%
filter(!is.na(lethal_nonlethal))
table_cog_root_lethal <- table_cog_root %>%
mutate(lethal_nonlethal = case_when(
ensembl_peptide_id %in% scerevisae_inviables$feature_name ~ "lethal"
), organism = "yeast") %>%
filter(!is.na(lethal_nonlethal))
table_cog_root_lethal <- table_cog_root %>%
mutate(lethal_nonlethal = case_when(
ensembl_peptide_id %in% scerevisae_inviables$feature_name ~ "lethal"
), organism = "yeast") %>%
filter(!is.na(lethal_nonlethal))
table_cog_root_nonlethal <- table_cog_root %>%
mutate(lethal_nonlethal = case_when(
ensembl_peptide_id %in% scerevisae_nonlethal$ensembl_peptide_id ~ "nonlethal"
), organism = "yeast") %>%
filter(!is.na(lethal_nonlethal))
table_cog_root <- rbind(table_cog_root_lethal, table_cog_root_nonlethal)
table_plot_yeast <- table_cog_root
View(table_plot_yeast)
save(table_plot_yeast, file = "table_plot_yeast.RData")
drosp_plot <- ggplot(table_plot_yeast, aes(x = factor(lethal_nonlethal), y = Root)) +
geom_boxplot(varwidth = TRUE) +
scale_y_continuous(limits = c(0, max(table_plot_yeast$Root) + 10),
breaks = seq(0, max(table_plot_yeast$Root) + 10, 5)) +
labs(x = "Categories") +
ggtitle("Root inference for lethal and non-lethal Yeast COGs") +
stat_compare_means(method = "wilcox.test", label = "p.signif", label.x = 1.5)
save(drosp_plot, file = "yeast_plot.RData")
ggsave(plot = drosp_plot, filename = "yeast_root.pdf",
width = 7, height = 7)
table_plot_yeast <- table_cog_root
# plot root inference
library(ggplot2)
library(ggpubr)
drosp_plot <- ggplot(table_plot_yeast, aes(x = factor(lethal_nonlethal), y = Root)) +
geom_boxplot(varwidth = TRUE) +
scale_y_continuous(limits = c(0, max(table_plot_yeast$Root) + 10),
breaks = seq(0, max(table_plot_yeast$Root) + 10, 5)) +
labs(x = "Categories") +
ggtitle("Root inference for lethal and non-lethal Yeast COGs") +
stat_compare_means(method = "wilcox.test", label = "p.signif", label.x = 1.5)
yeast_plot <- ggplot(table_plot_yeast, aes(x = factor(lethal_nonlethal), y = Root)) +
geom_boxplot(varwidth = TRUE) +
scale_y_continuous(limits = c(0, max(table_plot_yeast$Root) + 10),
breaks = seq(0, max(table_plot_yeast$Root) + 10, 5)) +
labs(x = "Categories") +
ggtitle("Root inference for lethal and non-lethal Yeast COGs") +
stat_compare_means(method = "wilcox.test", label = "p.signif", label.x = 1.5)
save(yeast_plot, file = "yeast_plot.RData")
ggsave(plot = drosp_plot, filename = "yeast_root.pdf",
width = 7, height = 7)
yeast_plot
# plot root inference
library(ggplot2)
library(ggpubr)
yeast_plot <- ggplot(table_plot_yeast, aes(x = factor(lethal_nonlethal), y = Root)) +
geom_boxplot(varwidth = TRUE) +
scale_y_continuous(limits = c(0, max(table_plot_yeast$Root) + 10),
breaks = seq(0, max(table_plot_yeast$Root) + 10, 5)) +
labs(x = "Categories") +
ggtitle("Root inference for lethal and non-lethal Yeast COGs") +
stat_compare_means(method = "wilcox.test", label = "p.signif", label.x = 1.5)
save(yeast_plot, file = "yeast_plot.RData")
ggsave(plot = drosp_plot, filename = "yeast_root.pdf",
width = 7, height = 7)
library(tidyverse)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
